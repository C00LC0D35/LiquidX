package net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.verus

import net.ccbluex.liquidbounce.LiquidBounce
import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.features.module.modules.exploit.Disabler
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.DisablerMode
import net.ccbluex.liquidbounce.utils.PacketUtils
import net.minecraft.network.play.client.C03PacketPlayer
import net.minecraft.network.play.client.C08PacketPlayerBlockPlacement
import net.minecraft.network.play.client.C09PacketHeldItemChange
import net.minecraft.network.play.client.C0BPacketEntityAction

class VerusLegit : DisablerMode("VerusLegit") {
    var x = 0.0
    var y = 0.0
    var z = 0.0
    var pitch = 0.0
    var yaw = 0.0
    var prevSlot = 0
    private var jam = 0
    private var packetCount = 0
    override fun onPacket(event: PacketEvent) {
        val packet = event!!.packet;
        val disabler = LiquidBounce.moduleManager[Disabler::class.java] as Disabler
        if (mc.thePlayer == null || mc.theWorld == null || event.isCancelled) return
        // fix ground check (4I)
        if (disabler.fly4I.get() && packet is C03PacketPlayer && packet !is C03PacketPlayer.C04PacketPlayerPosition && packet !is C03PacketPlayer.C06PacketPlayerPosLook) {
            if ((mc.thePlayer.motionY == 0.0 || (mc.thePlayer.onGround && mc.thePlayer.isCollidedVertically)) && !packet.onGround)
                packet.onGround = true
        }

        // some info things
        if (packet is C03PacketPlayer.C04PacketPlayerPosition) {
            x = packet.x
            y = packet.y
            z = packet.z
            jam = 0
        }

        if (packet is C03PacketPlayer.C05PacketPlayerLook) {
            yaw = packet.yaw.toDouble()
            pitch = packet.pitch.toDouble()
        }

        if (packet is C03PacketPlayer.C06PacketPlayerPosLook) {
            x = packet.x
            y = packet.y
            z = packet.z
            jam = 0

            yaw = packet.yaw.toDouble()
            pitch = packet.pitch.toDouble()
        }


        // fix bad packets, caused by timer or fast use
        if (disabler.timer3A.get() && packet is C03PacketPlayer && packet !is C03PacketPlayer.C04PacketPlayerPosition && packet !is C03PacketPlayer.C06PacketPlayerPosLook) {
            jam++
            if (jam > 20) {
                jam = 0
                event.cancelEvent()
                PacketUtils.sendPacketNoEvent(
                    C03PacketPlayer.C06PacketPlayerPosLook(
                        x,
                        y,
                        z,
                        yaw.toFloat(),
                        pitch.toFloat(),
                        packet.onGround
                    )
                )
                alerts("Packet C06 Send")
            }
        }

        // fix scaffold duplicated hotbar switch
        if (!mc.isSingleplayer && disabler.scaffold14D.get() && packet is C09PacketHeldItemChange) {
            if (packet.slotId == prevSlot) {
                event.cancelEvent()
                alerts("Packet C09 Cancel")
            } else {
                prevSlot = packet.slotId
            }
        }

        if (disabler.omniSprint13E.get() && packet is C0BPacketEntityAction) {
            event.cancelEvent()
            alerts("Packet C0B Cancel")
        }

        if (disabler.scaffold14E.get() && packet is C08PacketPlayerBlockPlacement) {
            packet.facingX = packet.facingX.coerceIn(-1.00000F, 1.00000F)
            packet.facingY = packet.facingY.coerceIn(-1.00000F, 1.00000F)
            packet.facingZ = packet.facingZ.coerceIn(-1.00000F, 1.00000F)
        }

        if (disabler.fly4I.get() && packet is C03PacketPlayer && !packet.onGround) {
            if (packet !is C03PacketPlayer.C04PacketPlayerPosition && packet !is C03PacketPlayer.C05PacketPlayerLook && packet !is C03PacketPlayer.C06PacketPlayerPosLook) {
                packetCount++
                if (packetCount >= 2) {
                    event.cancelEvent()
                    alerts("Packet C03 Cancel")
                }
            } else {
                packetCount = 0
            }
        }
    }
}
package net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.test;

import net.ccbluex.liquidbounce.LiquidBounce;
import net.ccbluex.liquidbounce.event.PacketEvent;
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.DisablerMode;
import net.ccbluex.liquidbounce.ui.client.hud.HUD;
import net.ccbluex.liquidbounce.utils.PacketUtils;
import net.ccbluex.liquidbounce.ui.client.hud.element.elements.Notification;
import net.ccbluex.liquidbounce.ui.client.hud.element.elements.NotifyType;
import net.ccbluex.liquidbounce.utils.misc.RandomUtils;
import net.minecraft.network.Packet;
import net.minecraft.network.play.INetHandlerPlayServer;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import org.jetbrains.annotations.NotNull;
import java.util.*;

import java.util.concurrent.LinkedBlockingQueue;

public class BuzzMovementDisabler extends DisablerMode {
    public BuzzMovementDisabler() {
        super("BuzzMovementPartial");
    }

    private LinkedBlockingQueue<Packet<INetHandlerPlayServer>> packets = new LinkedBlockingQueue<>();

    @Override
    public void onEnable() {
        packets.clear();
    }


    @Override
    public void onDisable() {
        packets.forEach(PacketUtils::sendPacketNoEvent);
    }

    @Override
    public void onPacket(@NotNull PacketEvent event) {
        Packet packet = event.getPacket();
        if(packet instanceof C0FPacketConfirmTransaction) {
            event.cancelEvent();
            mc.getNetHandler().addToSendQueue(new C00PacketKeepAlive(0));
        }
        if(packet instanceof C00PacketKeepAlive) {
            if(((C00PacketKeepAlive) packet).getKey() != 0) {
                event.cancelEvent();
            }
        }
        if (packet instanceof C03PacketPlayer) {
            if (mc.thePlayer.ticksExisted % 4 != 0) {
                event.cancelEvent();
            }
            ((C03PacketPlayer) packet).onGround = true;
        }
    }

}

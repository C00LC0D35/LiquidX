package net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.other

import net.ccbluex.liquidbounce.LiquidBounce
import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.event.UpdateEvent
import net.ccbluex.liquidbounce.event.WorldEvent
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.DisablerMode
import net.ccbluex.liquidbounce.ui.client.hud.element.elements.Notification
import net.ccbluex.liquidbounce.ui.client.hud.element.elements.NotifyType
import net.ccbluex.liquidbounce.utils.PacketUtils
import net.ccbluex.liquidbounce.utils.timer.MSTimer
import net.minecraft.network.Packet
import net.minecraft.network.play.INetHandlerPlayServer
import net.minecraft.network.play.client.C03PacketPlayer
import net.minecraft.network.play.client.C0FPacketConfirmTransaction
import net.minecraft.network.play.server.S08PacketPlayerPosLook
import java.util.*
import kotlin.math.sqrt

class LibrecraftSpoof : DisablerMode("Librecraft") {
    private var verus2Stat = false
    private var lagTimer = MSTimer()
    private var modified = false
    private val repeatTimes: Int
        get() = if(LiquidBounce.combatManager.inCombat) { 10 } else { 10 }
    private val packetBuffer = LinkedList<Packet<INetHandlerPlayServer>>()
    override fun onEnable() {
        verus2Stat = false
        lagTimer.reset()
        modified = false
        packetBuffer.clear()
    }
    override fun onWorld(event: WorldEvent) {
        verus2Stat = false
        packetBuffer.clear()
        lagTimer.reset()
    }


    override fun onUpdate(event: UpdateEvent) {
        modified = false
        if(lagTimer.hasTimePassed(490L)) {
            lagTimer.reset()
            if(packetBuffer.isNotEmpty()) {
                val packet = packetBuffer.poll()
                repeat(repeatTimes) {
                    PacketUtils.sendPacketNoEvent(packet)
                }
            } else {
            }
        }
    }
    override fun onPacket(event: PacketEvent) {
        val packet = event.packet
        if(packet is C0FPacketConfirmTransaction) {
            packetBuffer.add(packet)
            event.cancelEvent()
            if(packetBuffer.size > 1000) {
                if(!verus2Stat) {
                    verus2Stat = true
                    LiquidBounce.hud.addNotification(Notification(disabler.name, "AntiCheat is disabled.", NotifyType.SUCCESS))
                }
                val packeted = packetBuffer.poll()
                repeat(repeatTimes) {
                    PacketUtils.sendPacketNoEvent(packeted)
                }
            }
        } else if(packet is C03PacketPlayer) {
            if((mc.thePlayer.ticksExisted % 10 == 0) && (mc.thePlayer.ticksExisted > 1000 + 1) && !modified) {
                modified = true
                packet.y -= 11.4514 // 逸一时，误一世
                packet.onGround = false
            }
        } else if (packet is S08PacketPlayerPosLook && false) {
            val x = packet.x - mc.thePlayer.posX
            val y = packet.y - mc.thePlayer.posY
            val z = packet.z - mc.thePlayer.posZ
            val diff = sqrt(x * x + y * y + z * z)
            if (diff <= 8) {
                event.cancelEvent()
                // why didnt they check flag apply delay? LMAO
                PacketUtils.sendPacketNoEvent(
                        C03PacketPlayer.C06PacketPlayerPosLook(
                                packet.x,
                                packet.y,
                                packet.z,
                                packet.getYaw(),
                                packet.getPitch(),
                                true
                        )
                )
            }
        }

        if (mc.thePlayer != null && mc.thePlayer.ticksExisted <= 7) {
            lagTimer.reset()
            packetBuffer.clear()
        }
    }
}
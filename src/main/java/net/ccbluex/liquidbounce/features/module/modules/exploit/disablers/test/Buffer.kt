package  net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.test

import net.ccbluex.liquidbounce.LiquidBounce
import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.event.UpdateEvent
import net.ccbluex.liquidbounce.event.WorldEvent
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.DisablerMode
import net.ccbluex.liquidbounce.ui.client.hud.element.elements.Notification
import net.ccbluex.liquidbounce.ui.client.hud.element.elements.NotifyType
import net.ccbluex.liquidbounce.utils.PacketUtils
import net.ccbluex.liquidbounce.utils.timer.MSTimer
import net.ccbluex.liquidbounce.features.value.IntegerValue
import net.ccbluex.liquidbounce.utils.MinecraftInstance
import net.minecraft.network.Packet
import net.minecraft.network.play.INetHandlerPlayServer
import net.minecraft.network.play.client.C03PacketPlayer
import net.minecraft.network.play.client.C0FPacketConfirmTransaction
import net.minecraft.network.play.server.S08PacketPlayerPosLook
import java.util.*
import kotlin.math.sqrt

class Buffer : DisablerMode("BufferJazen") {
    private var Status = false
    private val BufferSizeValue = IntegerValue("BufferSize", 550, 0, 600)
    private val RepeatTimesValue = 10
    private val CombatRepeatTimesValue = 10
    private var MSTimer = MSTimer()
    private var modified = false

    private val buffer1 = 2
    private val buffer2 = 10000
    private val repeatTimes: Int
        get() = if (LiquidBounce.combatManager.inCombat) {
            CombatRepeatTimesValue
        } else {
            RepeatTimesValue
        }
    private val packetBuffer = LinkedList<Packet<INetHandlerPlayServer>>()
    override fun onEnable() {
        Status = false
        packetBuffer.clear()

    }

    override fun onWorld(event: WorldEvent) {
        Status = false

    }


    override fun onUpdate(event: UpdateEvent) {
        if (mc.thePlayer.ticksExisted % 20 < 10) {
            BufferSizeValue.set(buffer1)
            mc.timer.timerSpeed = 1f

        } else {
            BufferSizeValue.set(buffer2)
            mc.timer.timerSpeed = 1.0f
        }

            modified = false
        if (MSTimer.hasTimePassed(1200L)) {
            MSTimer.reset()
            LiquidBounce.hud.addNotification(Notification(disabler.name, "VERUS DETECTED YOU", NotifyType.WARNING))
            mc.timer.timerSpeed = 1f
                if (packetBuffer.isNotEmpty()) {
                    val packet = packetBuffer.size
                } else {
                }
        }

        }
        override fun onPacket(event: PacketEvent) {
            val packet = event.packet
            if (packet is C0FPacketConfirmTransaction) {
                packetBuffer.add(packet)
                event.cancelEvent()
                if (packetBuffer.size > BufferSizeValue.get()) {
                    if (!Status) {
                        Status = true
                        LiquidBounce.hud.addNotification(Notification(disabler.name, "Anticheat detected you.", NotifyType.SUCCESS))
                    }
                    val packeted = packetBuffer.poll()
                    repeat(repeatTimes) {
                        PacketUtils.sendPacketNoEvent(packeted)
                    }
                }
                disabler.debugMessage("Packet C0F IN ${packetBuffer.size}")
            }


            if (mc.thePlayer != null && mc.thePlayer.ticksExisted <= 7) {
                packetBuffer.clear()
                MSTimer.reset()
            }
    }
}

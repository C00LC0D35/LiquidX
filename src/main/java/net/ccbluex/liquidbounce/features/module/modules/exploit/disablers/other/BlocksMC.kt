/*
 * FDPClient Hacked Client
 * A free open source mixin-based injection hacked client for Minecraft using Minecraft Forge by LiquidBounce.
 * https://github.com/SkidderMC/FDPClient/
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.other

import net.ccbluex.liquidbounce.LiquidBounce
import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.features.module.modules.exploit.Disabler
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.DisablerMode
import net.ccbluex.liquidbounce.utils.NetWorkHelper
import net.ccbluex.liquidbounce.utils.PacketUtils
import net.minecraft.network.Packet
import net.minecraft.network.play.client.*
import net.minecraft.network.play.server.S07PacketRespawn
import net.minecraft.network.play.server.S08PacketPlayerPosLook
import net.minecraft.util.MathHelper
import java.util.*
import java.util.concurrent.ConcurrentLinkedDeque
import kotlin.math.sqrt

class BlocksMC : DisablerMode("BlocksMC") {
    var x = 0.0
    var y = 0.0
    var z = 0.0
    var pitch = 0.0
    var yaw = 0.0
    var prevSlot = 0
    private var jam = 0
    private var packetCount = 0

    private val packetList = ConcurrentLinkedDeque<Packet<*>>()
    var voidTP = 0f
    var diff = 0.0

    override fun onPacket(event: PacketEvent) {
        val packet = event!!.packet;
        val disabler = LiquidBounce.moduleManager[Disabler::class.java] as Disabler
        if (mc.thePlayer == null || mc.theWorld == null || event.isCancelled) return
        // fix ground check (4I)
        if (disabler.fly4I.get() && packet is C03PacketPlayer && packet !is C03PacketPlayer.C04PacketPlayerPosition && packet !is C03PacketPlayer.C06PacketPlayerPosLook) {
            if ((mc.thePlayer.motionY == 0.0 || (mc.thePlayer.onGround && mc.thePlayer.isCollidedVertically)) && !packet.onGround)
                packet.onGround = true
        }

        // some info things
        if (packet is C03PacketPlayer.C04PacketPlayerPosition) {
            x = packet.x
            y = packet.y
            z = packet.z
            jam = 0
        }

        if (packet is C03PacketPlayer.C05PacketPlayerLook) {
            yaw = packet.yaw.toDouble()
            pitch = packet.pitch.toDouble()
        }

        if (packet is C03PacketPlayer.C06PacketPlayerPosLook) {
            x = packet.x
            y = packet.y
            z = packet.z
            jam = 0

            yaw = packet.yaw.toDouble()
            pitch = packet.pitch.toDouble()
        }


        // fix bad packets, caused by timer or fast use
        if (disabler.timer3A.get() && packet is C03PacketPlayer && packet !is C03PacketPlayer.C04PacketPlayerPosition && packet !is C03PacketPlayer.C06PacketPlayerPosLook) {
            jam++
            if (jam > 20) {
                jam = 0
                event.cancelEvent()
                PacketUtils.sendPacketNoEvent(
                    C03PacketPlayer.C06PacketPlayerPosLook(
                        x,
                        y,
                        z,
                        yaw.toFloat(),
                        pitch.toFloat(),
                        packet.onGround
                    )
                )
                alerts("Packet C06 Send")
            }
        }

        // fix scaffold duplicated hotbar switch
        if (!mc.isSingleplayer && disabler.scaffold14D.get() && packet is C09PacketHeldItemChange) {
            if (packet.slotId == prevSlot) {
                event.cancelEvent()
                alerts("Packet C09 Cancel")
            } else {
                prevSlot = packet.slotId
            }
        }

        if (disabler.omniSprint13E.get() && packet is C0BPacketEntityAction) {
            event.cancelEvent()
            alerts("Packet C0B Cancel")
        }

        if (disabler.scaffold14E.get() && packet is C08PacketPlayerBlockPlacement) {
            packet.facingX = packet.facingX.coerceIn(-1.00000F, 1.00000F)
            packet.facingY = packet.facingY.coerceIn(-1.00000F, 1.00000F)
            packet.facingZ = packet.facingZ.coerceIn(-1.00000F, 1.00000F)
        }

        if (disabler.fly4I.get() && packet is C03PacketPlayer && !packet.onGround) {
            if (packet !is C03PacketPlayer.C04PacketPlayerPosition && packet !is C03PacketPlayer.C05PacketPlayerLook && packet !is C03PacketPlayer.C06PacketPlayerPosLook) {
                packetCount++
                if (packetCount >= 2) {
                    event.cancelEvent()
                    alerts("Packet C03 Cancel")
                }
            } else {
                packetCount = 0
            }
        }

        if (mc.thePlayer.ticksExisted < 250 && packet is S07PacketRespawn) {
            packetList.clear()
            return
        }

        if (packet is C0BPacketEntityAction) {
            if (packet.action == C0BPacketEntityAction.Action.START_SPRINTING as Any) {
                if (mc.thePlayer.serverSprintState) {
                    NetWorkHelper.sendPacketSilent(
                        C0BPacketEntityAction(
                            mc.thePlayer,
                            C0BPacketEntityAction.Action.STOP_SPRINTING
                        )
                    )
                    mc.thePlayer.serverSprintState = false
                }
                event.cancelEvent()
            }
            if (packet.action == C0BPacketEntityAction.Action.STOP_SPRINTING as Any) {
                event.cancelEvent()
            }
        }

        if (packet is C00PacketKeepAlive || packet is C0FPacketConfirmTransaction) {

            packetList.add(packet)
            event.cancelEvent()
            if (packetList.size > 500) {
                NetWorkHelper.sendPacketSilent(packetList.poll())
                event.cancelEvent()
            }
        }

        if(packet is S08PacketPlayerPosLook) {
            val x = packet.x - mc.thePlayer.posX
            diff = sqrt(x * x + (packet.y - mc.thePlayer.posY.also {
                y = it
            }) * y + (packet.z - mc.thePlayer.posZ.also {
                z = it
            }) * z)
            if (diff > 0.0) {
                event.cancelEvent()
            }

        }

        if (packet is C03PacketPlayer) {

            if (mc.thePlayer.ticksExisted % 50 === 0) {
                NetWorkHelper.sendPacketUnlogged(C18PacketSpectate(UUID.randomUUID()))
                voidTP = MathHelper.getRandomDoubleInRange(Random(), 0.78, 0.98).toFloat()
                NetWorkHelper.sendPacketUnlogged(C0CPacketInput(voidTP, voidTP, false, false))
            }

            if (mc.thePlayer.ticksExisted % 120 === 0) {
                voidTP = MathHelper.getRandomDoubleInRange(Random(), 0.01, 20.0).toFloat()
            }

        }

    }


}
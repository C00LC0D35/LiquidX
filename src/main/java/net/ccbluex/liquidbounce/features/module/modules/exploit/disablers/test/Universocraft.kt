package net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.other

import net.ccbluex.liquidbounce.LiquidBounce
import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.event.UpdateEvent
import net.ccbluex.liquidbounce.event.WorldEvent
import net.ccbluex.liquidbounce.features.module.modules.combat.NewKillAura
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.DisablerMode
import net.ccbluex.liquidbounce.features.module.modules.world.Scaffold
import net.ccbluex.liquidbounce.features.value.BoolValue
import net.ccbluex.liquidbounce.utils.ClientUtils
import net.ccbluex.liquidbounce.utils.misc.RandomUtils
import net.minecraft.network.play.INetHandlerPlayServer
import net.minecraft.network.play.client.C02PacketUseEntity
import net.minecraft.network.play.client.C0FPacketConfirmTransaction
import net.minecraft.network.play.client.C0BPacketEntityAction
import java.util.*
import kotlin.math.abs
import kotlin.random.Random

class Universocraft : DisablerMode("Universocraft") {
    private val KeepSprint = BoolValue("KeepSprint", false)
    private var transactions2 = false
    private var mochiticks = 0
    private val StrafeSemi = BoolValue("StrafeDisabler", false)
    private var transground = 0

    override fun onEnable() {
        transground = 0
        mochiticks = 0
        transactions2 = false
        LiquidBounce.moduleManager[NewKillAura::class.java]!!.rangeModeValue.set("Universocraft")
        LiquidBounce.moduleManager[Scaffold::class.java]!!.sprintValue.set("Hypixel")
        LiquidBounce.moduleManager[Scaffold::class.java]!!.speedModifierValue.set(0.8)
        if (KeepSprint.get())
            ClientUtils.displayChatMessage("§c§lWARNING: §fThis disabler changes some preferences in the modules to improve performance.")
    }



    override fun onUpdate(event: UpdateEvent) {

        if (KeepSprint.get()) {
            if (mc.thePlayer.ticksExisted % 20 < 10) {
                LiquidBounce.moduleManager[NewKillAura::class.java]!!.keepSprintValue.value = true
                transactions2 = true

            }
            if (mc.thePlayer.ticksExisted % 35 < 10) {
                LiquidBounce.moduleManager[NewKillAura::class.java]!!.keepSprintValue.value = false
                mc.thePlayer.ticksExisted = 0
                transactions2 = false
                mc.thePlayer.ticksExisted = 0
            }
        }
    }

    override fun onDisable() {
        transactions2 = false
        transground = 0
    }

    override fun onPacket(event: PacketEvent) {

        val packet = event.packet

        if (StrafeSemi.get()) {
            if (packet is C02PacketUseEntity)
                mochiticks = 0
            if (packet is C0FPacketConfirmTransaction) {
                if (mochiticks > 10 && mc.thePlayer.ticksExisted % 10 != 0) {
                    if (mc.thePlayer.onGround)
                        transground = packet.uid * -40
                    else
                        packet.uid = transground.toShort()
//                    event.cancelEvent()
                }
                mochiticks++

            }
        }

    }
}




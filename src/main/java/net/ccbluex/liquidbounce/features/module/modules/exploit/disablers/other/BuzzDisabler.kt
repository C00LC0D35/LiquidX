package net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.other

import net.ccbluex.liquidbounce.event.WorldEvent
import net.ccbluex.liquidbounce.LiquidBounce
import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.DisablerMode
import net.ccbluex.liquidbounce.features.module.modules.exploit.Disabler
import net.ccbluex.liquidbounce.script.api.global.Chat
import net.ccbluex.liquidbounce.utils.ClientUtils
import net.ccbluex.liquidbounce.utils.PacketUtils
import net.minecraft.network.Packet
import net.minecraft.network.play.INetHandlerPlayServer
import net.minecraft.network.play.client.*
import net.minecraft.network.play.client.C03PacketPlayer.C04PacketPlayerPosition
import java.util.concurrent.LinkedBlockingQueue

class BuzzDisabler : DisablerMode("Buzz") {

    private val storedC0F = LinkedBlockingQueue<Packet<INetHandlerPlayServer>>()
    private val storedC00 = LinkedBlockingQueue<Packet<INetHandlerPlayServer>>()
    
    override fun onEnable() {
        storedC0F.clear()
        storedC00.clear()
    }

    override fun onWorld(event: WorldEvent) {
        storedC0F.clear()
        storedC00.clear()
    }

    override fun onDisable() {
        while (!storedC0F.isEmpty()) {
            PacketUtils.sendPacketNoEvent(storedC0F.take())
        }
        while (!storedC00.isEmpty()) {
            PacketUtils.sendPacketNoEvent(storedC00.take())
        }
    }

    override fun onPacket(event: PacketEvent) {
        val packet = event.packet
        if (packet is C0FPacketConfirmTransaction) {
            storedC0F.add(packet)
            event.cancelEvent()
        }
        if (packet is C00PacketKeepAlive) {
            storedC00.add(packet)
            event.cancelEvent()
        }
        if(storedC0F.size >= (69*0.015625/0.0625)) {
            Chat.print("Transactions: "+storedC0F.size.toString()+" + KeepAlives: "+storedC00.size.toString())
            while (!storedC0F.isEmpty()) {
                PacketUtils.sendPacketNoEvent(storedC0F.take())
            }
            while (!storedC00.isEmpty()) {
                PacketUtils.sendPacketNoEvent(storedC00.take())
            }
            //mc.netHandler.addToSendQueue(C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY-11.015625, mc.thePlayer.posZ, false))
        }
    }
}

package net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.combat

import net.ccbluex.liquidbounce.LiquidBounce
import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.event.UpdateEvent
import net.ccbluex.liquidbounce.event.WorldEvent
import net.ccbluex.liquidbounce.features.module.modules.combat.NewKillAura
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.DisablerMode
import net.ccbluex.liquidbounce.script.api.global.Chat
import net.ccbluex.liquidbounce.utils.PacketUtils
import net.minecraft.network.Packet
import net.minecraft.network.play.INetHandlerPlayServer
import net.minecraft.network.play.client.C00PacketKeepAlive
import net.minecraft.network.play.client.C0FPacketConfirmTransaction
import java.util.concurrent.LinkedBlockingQueue

class UniKeepSprintDisabler : DisablerMode("UniKeepSprint") {

    private val storedC0F = LinkedBlockingQueue<Packet<INetHandlerPlayServer>>()
    private val storedC00 = LinkedBlockingQueue<Packet<INetHandlerPlayServer>>()

    private var attacking = false

    override fun onUpdate(event: UpdateEvent) {
        if(LiquidBounce.moduleManager[NewKillAura::class.java]!!.target != null && !attacking) {
            if(!attacking) {
                attacking = true
            }
        } else if(LiquidBounce.moduleManager[NewKillAura::class.java]!!.target == null && attacking) {
            attacking = false
        }
    }
    override fun onWorld(event: WorldEvent) {
        storedC0F.clear()
        storedC00.clear()
    }

    override fun onPacket(event: PacketEvent) {
        val packet = event.packet
        if(!attacking) {
            while (!storedC0F.isEmpty()) {
                PacketUtils.sendPacketNoEvent(storedC0F.take())
            }
            while (!storedC00.isEmpty()) {
                PacketUtils.sendPacketNoEvent(storedC00.take())
            }
            return
        }
        if (packet is C0FPacketConfirmTransaction) {
            storedC0F.add(packet)
            event.cancelEvent()
        }
        if (packet is C00PacketKeepAlive) {
            storedC00.add(packet)
            event.cancelEvent()
        }
        if(storedC0F.size >= (20)) {
            Chat.print("Transactions: "+storedC0F.size.toString()+" + KeepAlives: "+storedC00.size.toString())
            while (!storedC0F.isEmpty()) {
                PacketUtils.sendPacketNoEvent(storedC0F.take())
            }
            while (!storedC00.isEmpty()) {
                PacketUtils.sendPacketNoEvent(storedC00.take())
            }
            //mc.netHandler.addToSendQueue(C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY-11.015625, mc.thePlayer.posZ, false))
        }
    }
}
package net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.combat

import net.ccbluex.liquidbounce.LiquidBounce
import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.event.UpdateEvent
import net.ccbluex.liquidbounce.event.WorldEvent
import net.ccbluex.liquidbounce.features.module.modules.combat.KillAura
import net.ccbluex.liquidbounce.features.module.modules.combat.NewKillAura
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.DisablerMode
import net.ccbluex.liquidbounce.utils.PacketUtils
import net.ccbluex.liquidbounce.utils.timer.MSTimer
import net.minecraft.network.Packet
import net.minecraft.network.play.INetHandlerPlayServer
import net.minecraft.network.play.client.C0FPacketConfirmTransaction
import java.util.*
import kotlin.math.abs

class UniKeepSprintDisabler : DisablerMode("UniKeepSprint") {
    private var currentTrans = 0
    private var vulTickCounterUID = 0
    private val packetBuffer = LinkedList<Packet<INetHandlerPlayServer>>()
    private var attacking = false

    private val lagTimer = MSTimer()

    override fun onUpdate(event: UpdateEvent) {
        if(LiquidBounce.moduleManager[NewKillAura::class.java]!!.target != null && !attacking) {
            if(!attacking) {
                vulTickCounterUID = -25767
                attacking = true
            } else {
                if(lagTimer.hasTimePassed(5000L) && packetBuffer.size > 4) {
                    lagTimer.reset()
                    while (packetBuffer.size > 4) {
                        PacketUtils.sendPacketNoEvent(packetBuffer.poll())
                    }
                }
            }
        } else if(LiquidBounce.moduleManager[NewKillAura::class.java]!!.target == null && attacking) {
            attacking = false
        }
    }
    override fun onWorld(event: WorldEvent) {
        currentTrans = 0
        packetBuffer.clear()
        lagTimer.reset()
        vulTickCounterUID = -25767
    }
    override fun onPacket(event: PacketEvent) {
        val packet = event.packet
        if(!attacking) return
        if (packet is C0FPacketConfirmTransaction) {
            if (abs((abs((packet.uid).toInt()) - abs(vulTickCounterUID))) <= 4) {
                vulTickCounterUID = (packet.uid).toInt()
                packetBuffer.add(packet)
                event.cancelEvent()
                disabler.debugMessage("C0F-PingTickCounter IN ${packetBuffer.size}")
            }else if (abs((abs((packet.uid).toInt()) - 25767)) <= 4) {
                vulTickCounterUID = (packet.uid).toInt()
                disabler.debugMessage("C0F-PingTickCounter RESETED")
            }
        }
    }
}
package net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.combat

import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.event.UpdateEvent
import net.ccbluex.liquidbounce.event.WorldEvent
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.DisablerMode
import net.ccbluex.liquidbounce.utils.ClientUtils
import net.ccbluex.liquidbounce.utils.PacketUtils
import net.ccbluex.liquidbounce.utils.timer.MSTimer
import net.minecraft.network.Packet
import net.minecraft.network.play.INetHandlerPlayServer
import net.minecraft.network.play.client.C0FPacketConfirmTransaction
import java.util.*
import kotlin.math.abs

class VulcanCombatDisabler : DisablerMode("VulcanCombat") {
    private var TransactionLast = 0
    private var halflinUID = 0
    private val packetBuffer = LinkedList<Packet<INetHandlerPlayServer>>()
    private val lagTimer = MSTimer()
    override fun onEnable() {
        halflinUID = -25767
    }
    override fun onUpdate(event: UpdateEvent) {
        if(lagTimer.hasTimePassed(5000L) && packetBuffer.size > 4) {
            lagTimer.reset()
            while (packetBuffer.size > 4) {
                ClientUtils.displayChatMessage("")
                PacketUtils.sendPacketNoEvent(packetBuffer.poll())
            }
        }
    }
    override fun onWorld(event: WorldEvent) {
        TransactionLast = 0
        packetBuffer.clear()
        lagTimer.reset()
        halflinUID = -25767
    }
    override fun onPacket(event: PacketEvent) {
        val packet = event.packet
        if (packet is C0FPacketConfirmTransaction) {
            if (abs((abs((packet.uid).toInt()) - abs(halflinUID))) <= 4) {
                halflinUID = (packet.uid).toInt()
                packetBuffer.add(packet)
                event.cancelEvent()
            }else if (abs((abs((packet.uid).toInt()) - 25767)) <= 4) {
                halflinUID = (packet.uid).toInt()
            }
        }
    }
}